var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.329,1,1.858]],["body/controllers/AppController.html",[0,1.885,1,2.636,2,1.416,3,0.418,4,0.36,5,0.36,6,2.63,7,0.544,8,1.537,9,4.196,10,4.253,11,1.885,12,0.039,13,1.02,14,3.195,15,1.537,16,1.256,17,3.195,18,4.253,19,3.195,20,1.277,21,1.277,22,0.687,23,1.277,24,3.501,25,0.556,26,2.258,27,0.687,28,2.355,29,2.63,30,0.418,31,0.021,32,1.574,33,1.416,34,1.701,35,3.195,36,3.195,37,3.195,38,0.028,39,0.028]],["title/modules/AppModule.html",[40,1.083,41,1.858]],["body/modules/AppModule.html",[1,2.751,2,1.708,3,0.362,4,0.311,5,0.311,12,0.039,25,0.702,27,0.595,28,2.575,29,2.277,30,0.362,31,0.018,38,0.025,39,0.025,40,1.604,41,3.557,42,1.226,43,1.363,44,1.714,45,1.714,46,1.363,47,2.443,48,1.714,49,2.277,50,2.277,51,2.277,52,2.877,53,2.877,54,2.575,55,2.39,56,1.714,57,1.714,58,2.766,59,2.725,60,2.766,61,2.766,62,2.766,63,2.766,64,2.277,65,2.766,66,2.766]],["title/injectables/AppService.html",[28,1.477,67,0.885]],["body/injectables/AppService.html",[3,0.497,4,0.428,5,0.428,7,0.648,8,1.72,9,4.482,12,0.038,13,0.912,15,1.374,16,1.405,25,0.497,27,0.818,28,2.345,30,0.497,31,0.025,34,1.52,38,0.031,39,0.031,67,1.405,68,1.873,69,3.13,70,3.802,71,3.802,72,3.802]],["title/controllers/AuthController.html",[0,1.329,73,1.858]],["body/controllers/AuthController.html",[0,1.308,2,1.308,3,0.386,4,0.332,5,0.332,7,0.503,8,1.457,11,1.308,12,0.039,13,0.708,15,1.067,20,1.181,21,1.181,22,0.867,23,1.181,25,0.676,26,2.087,27,0.635,30,0.386,31,0.019,32,1.455,33,1.308,34,1.181,38,0.026,39,0.026,73,2.5,74,2.43,75,2.43,76,2.952,77,3.32,78,2.952,79,3.306,80,2.952,81,2.952,82,2.43,83,2.43,84,2.952,85,2.263,86,2.43,87,3.32,88,2.43,89,1.181,90,2.952,91,2.5,92,2.43,93,2.952,94,2.952,95,2.952,96,2.952,97,1.625,98,1.987,99,2.952]],["title/classes/AuthEntity.html",[31,0.019,100,1.858]],["body/classes/AuthEntity.html",[3,0.506,4,0.435,5,0.435,7,0.659,11,1.713,12,0.038,13,0.927,16,1.42,22,0.831,25,0.506,30,0.506,31,0.025,38,0.031,39,0.031,89,1.546,100,2.98,101,1.713,102,3.182,103,2.369,104,4.308,105,3.244,106,3.865]],["title/modules/AuthModule.html",[40,1.083,52,1.65]],["body/modules/AuthModule.html",[2,1.663,3,0.348,4,0.3,5,0.3,12,0.039,25,0.709,27,0.572,30,0.348,31,0.017,38,0.024,39,0.024,40,1.57,42,1.179,43,1.311,44,1.649,45,1.649,46,1.311,47,2.392,48,1.649,52,3.073,54,2.544,55,2.326,56,1.649,57,1.649,59,2.652,73,2.694,85,2.544,86,2.19,107,2.19,108,2.19,109,2.661,110,2.842,111,2.661,112,2.661,113,3.088,114,1.311,115,1.064,116,2.661,117,1.881,118,3.751,119,1.649,120,2.661,121,2.661,122,2.661,123,2.661,124,2.19,125,2.661,126,2.661,127,2.661]],["title/injectables/AuthService.html",[67,0.885,85,1.477]],["body/injectables/AuthService.html",[3,0.319,4,0.275,5,0.275,7,0.415,8,1.274,12,0.039,13,0.845,15,0.881,16,1.481,20,1.409,21,1.409,22,0.758,23,1.409,25,0.629,27,0.524,30,0.319,31,0.016,33,1.562,34,0.975,38,0.023,39,0.023,67,1.041,68,1.201,77,2.902,85,1.737,97,2.279,98,2.235,100,1.511,104,2.007,114,1.201,115,1.655,117,1.723,128,2.007,129,2.566,130,2.185,131,2.007,132,3.734,133,5.171,134,2.438,135,3.525,136,2.438,137,2.492,138,2.007,139,2.007,140,2.438,141,2.492,142,3.525,143,1.737,144,1.737,145,2.185,146,2.007,147,2.492,148,1.737,149,2.438,150,2.007,151,2.438,152,3.525,153,2.438,154,2.007,155,2.438,156,2.438,157,1.723,158,2.438]],["title/modules/CommonModule.html",[40,1.083,53,1.65]],["body/modules/CommonModule.html",[3,0.46,4,0.396,5,0.396,12,0.039,25,0.692,27,0.756,30,0.46,31,0.023,38,0.029,39,0.029,40,1.636,42,1.558,47,1.935,53,2.493,159,3.516,160,4.528,161,4.528,162,2.485,163,2.807,164,3.516,165,3.516,166,2.807,167,3.516,168,3.516,169,4.528,170,4.528]],["title/classes/CreateUserDto.html",[31,0.019,171,1.65]],["body/classes/CreateUserDto.html",[3,0.322,4,0.277,5,0.277,7,0.42,11,2.141,12,0.038,13,1.159,16,1.621,22,1.039,25,0.465,30,0.322,31,0.023,38,0.023,39,0.023,89,0.985,97,2.66,98,2.38,101,1.092,103,1.75,105,2.825,144,2.052,171,1.955,172,4.143,173,1.742,174,3.977,175,3.428,176,3.428,177,4.164,178,2.464,179,2.464,180,2.464,181,2.464,182,2.464,183,2.464,184,2.464,185,2.464,186,2.464,187,2.464,188,2.924,189,3.752,190,4.164,191,2.464,192,3.977,193,2.464,194,2.028,195,1.742,196,2.944,197,2.464,198,2.464,199,2.924,200,2.464,201,2.464,202,2.464]],["title/classes/HttpExceptionFilter.html",[31,0.019,163,1.858]],["body/classes/HttpExceptionFilter.html",[3,0.372,4,0.32,5,0.32,7,0.485,8,1.42,12,0.039,13,0.682,15,1.028,16,0.84,20,1.137,21,1.137,22,0.612,23,1.137,25,0.514,27,0.612,30,0.372,31,0.018,38,0.025,39,0.025,101,1.261,143,2.512,148,1.401,163,2.437,203,3.236,204,2.342,205,3.236,206,4.504,207,4.858,208,3.93,209,4.504,210,4.504,211,4.858,212,2.844,213,2.844,214,2.844,215,2.844,216,4.504,217,2.342,218,2.844,219,2.844,220,2.844,221,2.844,222,2.844,223,4.504,224,2.844,225,3.93,226,2.844,227,2.844,228,2.844,229,2.844,230,2.844,231,2.844]],["title/injectables/JwtAuthGuard.html",[67,0.885,166,1.858]],["body/injectables/JwtAuthGuard.html",[3,0.352,4,0.303,5,0.303,7,0.459,8,1.367,12,0.039,13,0.907,15,0.973,20,1.512,21,1.512,22,0.813,23,1.512,25,0.654,27,0.579,30,0.352,31,0.017,32,1.326,33,1.193,34,1.512,38,0.024,39,0.024,67,1.117,68,1.326,119,1.668,130,1.668,137,2.673,143,1.326,162,1.902,166,2.344,232,3.6,233,2.216,234,4.373,235,2.691,236,5.182,237,2.691,238,2.691,239,4.743,240,2.691,241,3.782,242,3.782,243,4.373,244,2.216,245,2.691,246,1.902,247,2.691,248,1.902,249,2.691,250,2.216,251,3.113,252,2.691,253,2.691,254,2.691,255,2.216,256,2.691]],["title/injectables/JwtStrategy.html",[67,0.885,110,1.65]],["body/injectables/JwtStrategy.html",[3,0.355,4,0.305,5,0.305,7,0.462,8,1.374,12,0.039,13,0.912,15,0.98,16,0.801,20,1.52,21,1.52,22,1.024,23,1.52,25,0.622,27,0.583,30,0.355,31,0.018,32,1.336,33,1.202,34,1.084,38,0.025,39,0.025,67,1.123,68,1.336,110,2.093,119,1.681,124,2.233,129,2.722,130,1.681,139,3.13,143,1.336,144,2.163,145,1.681,147,1.917,148,1.336,157,1.917,248,1.917,250,2.233,257,2.233,258,3.802,259,2.712,260,2.302,261,2.712,262,3.802,263,3.13,264,2.712,265,2.712,266,1.917,267,2.712,268,2.712,269,2.712,270,2.233,271,3.13,272,2.712,273,2.712,274,2.712,275,2.712,276,2.712,277,2.233,278,1.917,279,2.712]],["title/classes/LoginDto.html",[31,0.019,79,1.858]],["body/classes/LoginDto.html",[3,0.44,4,0.379,5,0.379,7,0.573,11,1.95,12,0.038,13,1.055,16,1.536,22,0.946,25,0.576,30,0.44,31,0.028,38,0.028,39,0.028,79,2.728,89,1.345,97,2.699,98,2.416,101,1.491,103,2.168,105,3.04,188,3.622,189,4.037,192,3.622,194,2.769,195,2.378,199,2.769,280,2.769,281,3.364,282,3.364,283,3.364,284,3.364]],["title/classes/UpdateUserDto.html",[31,0.019,285,1.65]],["body/classes/UpdateUserDto.html",[3,0.529,4,0.455,5,0.455,12,0.038,25,0.647,30,0.529,31,0.026,38,0.032,39,0.032,89,1.617,101,1.792,171,2.226,173,2.858,248,2.858,285,2.721,286,3.329,287,4.044,288,2.858,289,2.858,290,4.044]],["title/classes/UserEntity.html",[31,0.019,291,1.858]],["body/classes/UserEntity.html",[3,0.31,4,0.267,5,0.267,7,0.404,11,2.375,12,0.039,13,1.285,16,1.647,22,1.152,25,0.452,30,0.31,31,0.015,38,0.022,39,0.022,89,0.949,97,2.243,98,2.008,101,1.051,103,1.702,105,3.622,144,2.008,174,3.355,175,3.355,176,3.355,205,2.845,278,2.881,291,2.142,292,1.953,293,4.076,294,4.076,295,4.076,296,4.477,297,2.372,298,2.372,299,2.372,300,2.372,301,2.372,302,2.372,303,4.076,304,2.372,305,2.372,306,2.372,307,1.677]],["title/controllers/UsersController.html",[0,1.329,308,1.858]],["body/controllers/UsersController.html",[0,0.702,2,0.702,3,0.207,4,0.178,5,0.178,7,0.27,8,0.916,11,1.758,12,0.039,13,0.951,15,1.433,16,1.406,20,1.45,21,1.45,22,1.024,23,1.45,24,3.484,25,0.581,26,2.241,27,0.341,30,0.207,31,0.01,32,0.78,33,0.702,34,1.586,38,0.016,39,0.016,75,1.304,82,2.087,83,2.087,87,3.265,88,1.304,89,0.633,91,1.966,92,1.304,129,1.966,138,1.304,143,1.562,144,1.562,145,0.982,147,2.241,148,1.562,150,1.304,157,2.563,171,2.329,260,1.405,266,1.119,277,1.304,278,3.648,285,2.542,288,1.792,289,1.792,291,2.755,308,1.572,309,1.304,310,1.304,311,2.985,312,2.087,313,2.087,314,2.985,315,1.583,316,1.583,317,1.583,318,1.583,319,1.583,320,1.583,321,1.583,322,1.583,323,3.171,324,1.583,325,1.583,326,1.583,327,1.583,328,1.583,329,1.583,330,1.583,331,1.583,332,1.583,333,2.087,334,1.583,335,1.304,336,1.583,337,1.304,338,3.625,339,2.535,340,1.583,341,1.583,342,1.583,343,1.583,344,1.583,345,1.583,346,1.583,347,1.583,348,1.583,349,1.583,350,1.583,351,2.535,352,2.535,353,2.535,354,1.583,355,1.304,356,1.583,357,1.583,358,1.583]],["title/modules/UsersModule.html",[40,1.083,54,1.477]],["body/modules/UsersModule.html",[2,1.857,3,0.409,4,0.352,5,0.352,12,0.038,25,0.661,27,0.672,30,0.409,31,0.02,38,0.027,39,0.027,40,1.708,42,1.384,43,1.539,44,1.936,45,1.936,46,1.539,47,2.602,48,2.93,54,2.729,55,2.597,56,1.936,57,1.936,59,2.208,113,3.449,114,1.539,115,1.249,260,2.594,308,2.93,335,2.571,359,2.571,360,2.571,361,2.571,362,3.124,363,3.124]],["title/injectables/UsersService.html",[67,0.885,260,1.329]],["body/injectables/UsersService.html",[3,0.228,4,0.196,5,0.196,7,0.297,8,0.99,12,0.039,13,1.059,15,1.503,20,1.663,21,1.663,22,0.993,23,1.663,25,0.544,27,0.375,30,0.358,31,0.011,32,0.86,33,0.773,34,1.663,38,0.018,39,0.018,67,0.809,68,0.86,98,1.349,114,0.86,115,1.531,129,3.351,130,1.082,131,1.437,132,3.152,137,2.706,141,1.936,143,2.355,144,2.049,145,2.861,146,1.437,154,1.437,260,1.214,263,2.255,266,2.389,285,1.508,288,1.936,289,1.234,307,1.234,310,2.255,311,3.152,312,2.255,313,2.255,314,2.255,333,1.437,337,1.437,355,3.424,364,1.234,365,1.745,366,2.739,367,3.38,368,1.745,369,1.745,370,2.739,371,4.616,372,1.745,373,2.739,374,1.745,375,2.739,376,1.745,377,2.739,378,2.389,379,1.437,380,2.739,381,2.739,382,3.38,383,1.745,384,1.745,385,1.745,386,3.829,387,1.745,388,1.745]],["title/coverage.html",[389,2.88]],["body/coverage.html",[0,1.831,1,1.506,5,0.274,6,2,12,0.038,22,0.523,28,1.197,31,0.032,38,0.023,39,0.023,46,1.197,67,1.419,69,2,73,1.506,74,2,79,1.506,85,1.197,91,1.506,100,1.506,102,2,110,1.337,115,0.972,128,2,148,1.197,163,1.506,166,1.506,171,1.337,172,2,173,2.485,203,2,204,2,232,2,233,2,246,1.717,257,2,260,1.077,280,2,285,1.337,286,2,291,1.506,292,2,308,1.506,309,2,364,2.485,378,1.717,389,1.717,390,2.43,391,2.43,392,2.43,393,2.92,394,3.516,395,2,396,5.904,397,5.29,398,4.805,399,2,400,4.805,401,4.528,402,2.895,403,2,404,3.516,405,2.43,406,2.43,407,2.43,408,2.43]],["title/dependencies.html",[43,1.774,409,2.068]],["body/dependencies.html",[12,0.039,27,0.707,31,0.028,38,0.028,39,0.028,43,1.618,64,2.704,89,1.313,114,1.618,115,1.313,117,2.322,119,2.036,141,2.322,162,2.322,195,2.322,217,3.566,244,2.704,270,3.566,271,2.704,307,2.322,410,4.847,411,3.285,412,3.285,413,3.285,414,3.285,415,3.285,416,3.285,417,3.285,418,3.285,419,3.285,420,3.285,421,3.285,422,3.285,423,3.285,424,3.285,425,3.285,426,3.285,427,3.285,428,3.285,429,3.285,430,3.285,431,3.285,432,3.285]],["title/miscellaneous/functions.html",[433,1.557,434,2.965]],["body/miscellaneous/functions.html",[7,0.736,12,0.033,38,0.033,39,0.033,46,2.707,393,3.052,395,4.523,403,3.555,433,2.677,434,3.555,435,4.318,436,3.555]],["title/index.html",[7,0.428,437,2.512,438,2.512]],["body/index.html",[4,0.318,12,0.038,38,0.025,39,0.025,196,1.994,389,1.994,439,2.821,440,2.821,441,3.909,442,2.821,443,2.821,444,2.821,445,2.821,446,2.821,447,2.821,448,4.485,449,2.821,450,2.821,451,2.821,452,2.821,453,5.393,454,2.821,455,2.821,456,3.909,457,2.821,458,2.821,459,2.821,460,2.821,461,2.821,462,5.26,463,2.821,464,2.821,465,3.909,466,2.821,467,2.821,468,2.821,469,2.821,470,3.909,471,3.909,472,2.821,473,2.821,474,2.821,475,3.909,476,3.909,477,2.821,478,2.821,479,2.821,480,2.821,481,2.821,482,2.323,483,2.821,484,2.821,485,2.821,486,2.821,487,2.821,488,2.821,489,2.821,490,2.821,491,2.821,492,2.821,493,2.323,494,2.821,495,2.821,496,2.821,497,2.821,498,2.821,499,2.821,500,2.323]],["title/modules.html",[42,1.806]],["body/modules.html",[12,0.032,38,0.032,39,0.032,41,2.566,42,1.834,52,2.279,53,2.279,54,2.039,482,4.441,501,5.395,502,5.395,503,5.607,504,4.139,505,4.139]],["title/overview.html",[506,3.355]],["body/overview.html",[2,1.342,12,0.037,28,2.293,38,0.027,39,0.027,40,1.095,41,3.551,42,1.342,43,1.492,44,1.878,45,1.878,46,1.492,47,1.667,48,1.878,49,2.494,50,2.494,51,2.494,52,3.119,53,2.562,54,2.708,55,2.544,56,1.878,57,1.878,68,1.492,85,2.293,101,1.342,107,2.494,108,2.494,110,2.562,260,2.436,359,2.494,360,2.494,361,2.494,506,2.494,507,3.029,508,3.029,509,3.029,510,3.029]],["title/properties.html",[103,1.774,409,2.068]],["body/properties.html",[12,0.038,38,0.033,39,0.033,103,2.076,114,2.076,115,1.685,196,2.979,493,3.469,500,3.469,511,4.214,512,4.214,513,4.214,514,4.214,515,4.214,516,4.214,517,4.214]],["title/miscellaneous/variables.html",[433,1.557,518,2.965]],["body/miscellaneous/variables.html",[7,0.587,12,0.038,16,1.018,22,1.067,38,0.029,39,0.029,91,2.771,115,1.787,148,1.698,246,3.16,251,2.837,255,2.837,364,2.436,378,3.16,379,3.68,393,2.436,399,3.68,402,2.837,433,2.136,436,3.68,518,2.837,519,4.47,520,3.446,521,5.44,522,5.44,523,3.446,524,3.446,525,4.47]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["0.20.0",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":512,"title":{},"body":{"properties.html":{}}}],["10",{"_index":379,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":508,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":507,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["4.15.0",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["4.6.3",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":509,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["5m",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["6",{"_index":510,"title":{},"body":{"overview.html":{}}}],["6.3.0",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["accesstoken",{"_index":104,"title":{},"body":{"classes/AuthEntity.html":{},"injectables/AuthService.html":{}}}],["amazing",{"_index":483,"title":{},"body":{"index.html":{}}}],["api",{"_index":513,"title":{},"body":{"properties.html":{}}}],["apibearerauth",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":105,"title":{},"body":{"classes/AuthEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({description",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apitags",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":460,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":160,"title":{},"body":{"modules/CommonModule.html":{}}}],["app_guard",{"_index":161,"title":{},"body":{"modules/CommonModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":447,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":41,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":28,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":211,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":168,"title":{},"body":{"modules/CommonModule.html":{}}}],["auth.guard.ts",{"_index":233,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":240,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:8",{"_index":237,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":73,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentity",{"_index":100,"title":{"classes/AuthEntity.html":{}},"body":{"classes/AuthEntity.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":245,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":249,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":52,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":493,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":85,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":505,"title":{},"body":{"modules.html":{}}}],["await",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":484,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":334,"title":{},"body":{"controllers/UsersController.html":{}}}],["badrequestexception(`you",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":381,"title":{},"body":{"injectables/UsersService.html":{}}}],["body",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":242,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["bootstrap",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":503,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":501,"title":{},"body":{"modules.html":{}}}],["building",{"_index":442,"title":{},"body":{"index.html":{}}}],["built",{"_index":515,"title":{},"body":{"properties.html":{}}}],["can't",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["canactivate",{"_index":234,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":238,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["catch",{"_index":207,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":208,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":31,"title":{"classes/AuthEntity.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":101,"title":{},"body":{"classes/AuthEntity.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":359,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":360,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":361,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["common/common.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["commonmodule",{"_index":53,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["compose",{"_index":457,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(prisma",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":235,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(usersservice",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["context",{"_index":241,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.getclass",{"_index":254,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":253,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":389,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":288,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":315,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(data",{"_index":366,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdat",{"_index":293,"title":{},"body":{"classes/UserEntity.html":{}}}],["createuserdto",{"_index":171,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["ctx",{"_index":218,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":220,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.password",{"_index":382,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":296,"title":{},"body":{"classes/UserEntity.html":{}}}],["date().toisostring",{"_index":231,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["declarations",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["decorators/public.decorator",{"_index":247,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["default",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":333,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apiokresponse({type",{"_index":326,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":43,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":461,"title":{},"body":{"index.html":{}}}],["docker",{"_index":456,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/login.dto",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":472,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":443,"title":{},"body":{"index.html":{}}}],["emai",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["email",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{}}}],["entities/user.entity",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["entity/auth.entity",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":225,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception",{"_index":213,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":165,"title":{},"body":{"modules/CommonModule.html":{}}}],["exception.filter.ts",{"_index":204,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":212,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":224,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":222,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":206,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse",{"_index":223,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":239,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["expiresin",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":217,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":248,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":268,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":275,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filters/http",{"_index":164,"title":{},"body":{"modules/CommonModule.html":{}}}],["findall",{"_index":311,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":312,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":321,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(where",{"_index":370,"title":{},"body":{"injectables/UsersService.html":{}}}],["found",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":441,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":174,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserEntity.html":{}}}],["function",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":434,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apiokresponse({type",{"_index":322,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@public()@apiokresponse({type",{"_index":318,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":437,"title":{"index.html":{}},"body":{}}],["graph",{"_index":504,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":479,"title":{},"body":{"index.html":{}}}],["guards/jwt",{"_index":167,"title":{},"body":{"modules/CommonModule.html":{}}}],["hashedpassword",{"_index":380,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":490,"title":{},"body":{"index.html":{}}}],["host",{"_index":210,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":219,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":215,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":163,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/CommonModule.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":497,"title":{},"body":{"index.html":{}}}],["id",{"_index":278,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":205,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/UserEntity.html":{}}}],["import",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":67,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":452,"title":{},"body":{"index.html":{}}}],["installdatabase",{"_index":454,"title":{},"body":{"index.html":{}}}],["is_public_key",{"_index":246,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":188,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isemail()@isnotempty()@apiproperty",{"_index":281,"title":{},"body":{"classes/LoginDto.html":{}}}],["isnotempty",{"_index":189,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isoptional",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional()@isphonenumber('vn",{"_index":184,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional()@isstring()@minlength(6)@maxlength(25",{"_index":186,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispasswordvalid",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumber",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isphonenumber('vn",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispublic",{"_index":251,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isstring()@isnotempty()@minlength(6)@apiproperty",{"_index":283,"title":{},"body":{"classes/LoginDto.html":{}}}],["join",{"_index":486,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":271,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":166,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":274,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":110,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":494,"title":{},"body":{"index.html":{}}}],["legend",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":500,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":476,"title":{},"body":{"index.html":{}}}],["literal",{"_index":263,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["login",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":79,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["main",{"_index":395,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(100",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(25",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(50",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":227,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["metadata",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["minlength(6",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["minlength(8",{"_index":197,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":433,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":475,"title":{},"body":{"index.html":{}}}],["mode",{"_index":465,"title":{},"body":{"index.html":{}}}],["module",{"_index":40,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":42,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":489,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":495,"title":{},"body":{"index.html":{}}}],["name",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":448,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":499,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"properties.html":{}}}],["nestjs/common",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":162,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":440,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["notfoundexception(`${id",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["notfoundexception(`user",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":228,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["observable",{"_index":243,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["open",{"_index":477,"title":{},"body":{"index.html":{}}}],["optional",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":506,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":409,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":332,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":377,"title":{},"body":{"injectables/UsersService.html":{}}}],["partialtype",{"_index":287,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":290,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":270,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":267,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":273,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":331,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id')@apiokresponse({type",{"_index":329,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":265,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":279,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["phone",{"_index":175,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserEntity.html":{}}}],["please",{"_index":487,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":453,"title":{},"body":{"index.html":{}}}],["post",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@public()@apicreatedresponse({type",{"_index":316,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["prisma.usercreateinput",{"_index":367,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":371,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/.../seed.ts",{"_index":436,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":307,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/seed.ts",{"_index":393,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prismamodule",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["prismaservice",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["private",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_secret",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":467,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":439,"title":{},"body":{"index.html":{}}}],["project",{"_index":478,"title":{},"body":{"index.html":{}}}],["promise",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":103,"title":{"properties.html":{}},"body":{"classes/AuthEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["provide",{"_index":169,"title":{},"body":{"modules/CommonModule.html":{}}}],["providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('login')@apiokresponse({type",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["read",{"_index":488,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":236,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["remove",{"_index":313,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":325,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(where",{"_index":373,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":451,"title":{},"body":{"index.html":{}}}],["req",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user.id",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":216,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(status).json",{"_index":229,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":386,"title":{},"body":{"injectables/UsersService.html":{}}}],["results",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":294,"title":{},"body":{"classes/UserEntity.html":{}}}],["roundsofhashing",{"_index":399,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["roundsofhasing",{"_index":378,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":462,"title":{},"body":{"index.html":{}}}],["running",{"_index":459,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":244,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["scalable",{"_index":444,"title":{},"body":{"index.html":{}}}],["secret",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":276,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":445,"title":{},"body":{"index.html":{}}}],["setmetadata(is_public_key",{"_index":523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shop",{"_index":514,"title":{},"body":{"properties.html":{}}}],["side",{"_index":446,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":481,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.service.ts",{"_index":520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":280,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:14",{"_index":284,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:8",{"_index":282,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entity/auth.entity.ts",{"_index":102,"title":{},"body":{"classes/AuthEntity.html":{},"coverage.html":{}}}],["src/auth/entity/auth.entity.ts:5",{"_index":106,"title":{},"body":{"classes/AuthEntity.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":257,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/common.module.ts",{"_index":159,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/decorators/public.decorator",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["src/common/decorators/public.decorator.ts",{"_index":402,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/http",{"_index":203,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/guards/jwt",{"_index":232,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":403,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":286,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":292,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:12",{"_index":298,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:15",{"_index":306,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:18",{"_index":302,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:21",{"_index":301,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:24",{"_index":299,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:27",{"_index":297,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":305,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:6",{"_index":300,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:9",{"_index":304,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.controller.ts",{"_index":309,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:33",{"_index":317,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:40",{"_index":320,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":324,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":330,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:76",{"_index":327,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":362,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":272,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":364,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.service.ts:10",{"_index":365,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:13",{"_index":368,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":369,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":372,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":376,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":374,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":463,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":466,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":468,"title":{},"body":{"index.html":{}}}],["started",{"_index":438,"title":{"index.html":{}},"body":{}}],["starter",{"_index":450,"title":{},"body":{"index.html":{}}}],["statements",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":221,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":491,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":269,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthEntity.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":250,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":256,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":482,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":502,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":209,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["table",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":471,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":474,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":473,"title":{},"body":{"index.html":{}}}],["tests",{"_index":470,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":480,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(email",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.sign",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.create",{"_index":383,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.delete",{"_index":388,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":384,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":387,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":252,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.usersservice.create(createuserdto",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":277,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.remove",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["timestamp",{"_index":230,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["touch",{"_index":492,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":255,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":498,"title":{},"body":{"index.html":{}}}],["type",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthEntity.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":226,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["types",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":449,"title":{},"body":{"index.html":{}}}],["ui",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":319,"title":{},"body":{"controllers/UsersController.html":{}}}],["unit",{"_index":469,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":266,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":516,"title":{},"body":{"properties.html":{}}}],["up",{"_index":458,"title":{},"body":{"index.html":{}}}],["update",{"_index":314,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":328,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(params",{"_index":375,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":295,"title":{},"body":{"classes/UserEntity.html":{}}}],["updateuserdto",{"_index":285,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useclass",{"_index":170,"title":{},"body":{"modules/CommonModule.html":{}}}],["useguards",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user'})@isnotempty()@isstring()@isemail",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isnotempty()@isstring()@minlength(6)@maxlength(50",{"_index":182,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isnotempty()@isstring()@minlength(8)@maxlength(100",{"_index":180,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto",{"_index":289,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":173,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:17",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":181,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":183,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":187,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":185,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["userentity",{"_index":291,"title":{"classes/UserEntity.html":{}},"body":{"classes/UserEntity.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userentity})@apibearerauth",{"_index":323,"title":{},"body":{"controllers/UsersController.html":{}}}],["userid",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["username",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserEntity.html":{}}}],["userrole",{"_index":303,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":310,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":363,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.filter((user",{"_index":385,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":308,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":54,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":260,"title":{"injectables/UsersService.html":{}},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":262,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"dependencies.html":{}}}],["value",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":518,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":511,"title":{},"body":{"properties.html":{}}}],["via",{"_index":455,"title":{},"body":{"index.html":{}}}],["void",{"_index":214,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":464,"title":{},"body":{"index.html":{}}}],["website",{"_index":496,"title":{},"body":{"index.html":{}}}],["world",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":485,"title":{},"body":{"index.html":{}}}],["zenfection",{"_index":517,"title":{},"body":{"properties.html":{}}}],["zoom",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('profile')\n  getProfile(@Request() req: any) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { CommonModule } from './common/common.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [ConfigModule.forRoot(), UsersModule, CommonModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiOkResponse({type: LoginDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Request,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { LoginDto } from './dto/login.dto';\nimport { Public } from '../../src/common/decorators/public.decorator';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Public()\n  @Post('login')\n  @ApiOkResponse({ type: LoginDto })\n  login(@Body() { email, password }: LoginDto) {\n    return this.authService.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthEntity.html":{"url":"classes/AuthEntity.html","title":"class - AuthEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/auth.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/auth.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthEntity {\n  @ApiProperty()\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { PrismaModule } from 'nestjs-prisma';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UsersModule } from '../../src/users/users.module';\n\n@Module({\n  imports: [\n    PrismaModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '5m' },\n    }),\n    UsersModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from 'nestjs-prisma';\nimport { AuthEntity } from './entity/auth.entity';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async login(email: string, password: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User not found for emai: ${email}`);\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid password');\n    }\n\n    return {\n      accessToken: this.jwtService.sign({ userId: user.id }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER, APP_GUARD } from '@nestjs/core';\nimport { HttpExceptionFilter } from './filters/http-exception.filter';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\n@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: HttpExceptionFilter,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                fullname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email of the user'})@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        fullname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Fullname of the user'})@IsNotEmpty()@IsString()@MinLength(8)@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password of the user'})@IsNotEmpty()@IsString()@MinLength(6)@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPhoneNumber('VN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(6)@MaxLength(25)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({ description: 'Email of the user' })\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({ description: 'Fullname of the user' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(100)\n  fullname: string;\n\n  @ApiProperty({ description: 'Password of the user' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(50)\n  password: string;\n\n  @IsOptional()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(25)\n  username: string;\n\n  @IsOptional()\n  @IsPhoneNumber('VN')\n  phone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n@Catch()\nexport class HttpExceptionFilter\n  implements ExceptionFilter\n{\n  catch(exception: T, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n    const error =\n      typeof response === 'string'\n        ? { message: exceptionResponse }\n        : (exceptionResponse as object);\n\n    response.status(status).json({\n      ...error,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/jwt-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/jwt-auth.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from '../../src/users/users.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private readonly usersService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: { userId: string }) {\n    const user = await this.usersService.findOne({ id: payload.userId });\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(6)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                fullname\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fullname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User, UserRole } from '@prisma/client';\n\nexport class UserEntity implements User {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  role: UserRole;\n\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  username: string;\n\n  @ApiProperty()\n  phone: string;\n\n  @ApiProperty()\n  password: string;\n\n  @ApiProperty()\n  fullname: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Public()@ApiCreatedResponse({type: UserEntity})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Public()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: UserEntity})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse({type: UserEntity})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOkResponse({type: UserEntity})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Request,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { UserEntity } from './entities/user.entity';\nimport { Public } from '../../src/common/decorators/public.decorator';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @Public()\n  @ApiCreatedResponse({ type: UserEntity })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @Public()\n  @ApiOkResponse({ type: [UserEntity] })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: UserEntity })\n  @ApiBearerAuth()\n  async findOne(@Param('id') id: string) {\n    const user = await this.usersService.findOne({ id });\n    if (!user) {\n      throw new NotFoundException(`${id} not found`);\n    }\n    return user;\n  }\n\n  @Patch(':id')\n  @ApiOkResponse({ type: UserEntity })\n  @ApiBearerAuth()\n  update(\n    @Param('id') id: string,\n    @Body() updateUserDto: UpdateUserDto,\n    @Request() req: any,\n  ) {\n    const userId = req.user.id;\n    if (userId !== id) {\n      throw new BadRequestException(`You can't update this ${id}`);\n    }\n    return this.usersService.update({\n      where: { id },\n      data: updateUserDto,\n    });\n  }\n\n  @Delete(':id')\n  @ApiOkResponse({ type: UserEntity })\n  @ApiBearerAuth()\n  remove(@Param('id') id: string, @Request() req: any) {\n    const userId = req.user.id;\n    if (userId !== id) {\n      throw new BadRequestException(`You can't delete this ${id}`);\n    }\n    return this.usersService.remove({ id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaModule } from 'nestjs-prisma';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'nestjs-prisma';\nimport { Prisma, User } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\nexport const roundsOfHasing = 10;\n\n@Injectable()\nexport class UsersService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(data: Prisma.UserCreateInput): Promise {\n    const hashedPassword = await bcrypt.hash(data.password, roundsOfHasing);\n\n    data.password = hashedPassword;\n\n    return await this.prisma.user.create({\n      data,\n    });\n  }\n\n  async findAll() {\n    const users = await this.prisma.user.findMany();\n    users.filter((user) => {\n      delete user.password;\n    });\n    return users;\n  }\n\n  async findOne(where: Prisma.UserWhereUniqueInput) {\n    const user = await this.prisma.user.findUnique({\n      where,\n    });\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async update(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: UpdateUserDto;\n  }): Promise {\n    const { where, data } = params;\n\n    if (data.password) {\n      data.password = await bcrypt.hash(data.password, roundsOfHasing);\n    }\n\n    return await this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async remove(where: Prisma.UserWhereUniqueInput) {\n    const user = await this.prisma.user.delete({\n      where,\n    });\n    const { password, ...result } = user;\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            roundsOfHashing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entity/auth.entity.ts\n            \n            class\n            AuthEntity\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            variable\n            roundsOfHasing\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            @prisma/client : 4.15.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            nestjs-prisma : ^0.20.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.6.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ pnpm installDatabase via docker\n$ docker-compose up  Running the app\n# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodTest\n# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : API for a shop built with NestJS and Prisma\n        \n            License : UNLICENSED\n        \n            Author : Zenfection\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            roundsOfHashing   (prisma/.../seed.ts)\n                        \n                        \n                            roundsOfHasing   (src/.../users.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roundsOfHashing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/users/users.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roundsOfHasing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
